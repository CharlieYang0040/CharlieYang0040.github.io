## 9강: 실사 합성을 위한 렌더링 실습 (Deep 출력)

### 수업 목표

- 후반 합성(Compositing) 과정에서 왜 렌더링된 요소들의 깊이(Depth) 정보가 중요한지 이해합니다.
- 기존 Z-Depth 방식의 한계를 파악하고, **Deep Data**가 이를 어떻게 해결하는지 배웁니다.
- RenderMan에서 **Deep OpenEXR** 포맷으로 렌더링을 설정하고 출력하는 방법을 실습합니다.
- Nuke 합성 파이프라인에 전달하기 위한 최종 렌더 패키지(Deep Data, LPEs, Shadow Pass)를 구성하는 방법을 익힙니다.

---

### **1. 합성(Compositing): 렌더링 그 이후의 세상**

합성은 렌더링된 CG 요소(캐릭터, 로봇 등)와 실사 촬영 영상(배경), 그리고 다른 특수 효과들을 하나의 완벽하고 사실적인 최종 화면으로 합치는 과정입니다. 이때 합성 아티스트는 단순히 이미지를 겹치는 것이 아니라, 각 요소의 색상, 밝기, 그리고 **공간적인 위치 관계**를 정밀하게 제어해야 합니다.

"CG 캐릭터가 실사 촬영된 기둥 뒤로 자연스럽게 걸어 들어가게 해주세요."

이런 작업을 하려면 렌더링된 캐릭터의 모든 픽셀이 카메라로부터 얼마나 떨어져 있는지에 대한 **깊이(Depth) 정보**가 반드시 필요합니다.

---

### **2. Z-Depth의 한계와 Deep Data의 등장**

우리는 4강에서 **Z-Depth** AOV를 배운 바 있습니다. 이는 각 픽셀의 깊이 정보를 흑백 이미지로 저장하는 유용한 방식이지만, 다음과 같은 치명적인 한계를 가집니다.

- **반투명 및 볼륨:** 유리, 연기, 불꽃처럼 반투명한 오브젝트 뒤에 다른 CG 요소를 배치하려고 하면 Z-Depth는 올바른 깊이 값을 제공하지 못합니다.
- **모션 블러 & 피사계 심도:** 빠르게 움직이거나 초점이 맞지 않아 가장자리가 흐릿해진(Anti-aliased) 픽셀의 정확한 경계를 구분할 수 없어, 합성 시 가장자리에 검은색이나 흰색 테두리(Edge Artifacts)가 생기는 원인이 됩니다.
- **미세한 디테일:** 캐릭터의 머리카락 한 올 한 올 사이로 배경이 보여야 하는 경우, Z-Depth는 이 복잡한 관계를 처리하지 못합니다.

> 종이 인형 비유: 🖼️ Z-Depth는 렌더링된 결과물을 하나의 '종이 인형'처럼 취급합니다. 인형의 실루엣은 알 수 있지만, 그 인형의 속이 얼마나 깊은지, 얇은 머리카락 사이사이의 공간은 어떤지에 대한 정보는 전혀 없습니다.
> 
> 
> **Deep Data**는 여기서 한 걸음 더 나아가, 각 픽셀을 '데이터로 채워진 수족관'처럼 취급합니다. 🐠 픽셀 하나하나가 그 안을 통과한 모든 샘플의 색상, 투명도, 그리고 **'모든 깊이'** 정보를 리스트 형태로 저장합니다.
> 

Deep Data를 사용하면 합성 아티스트는 연기 속으로 자연스럽게 사라지는 캐릭터를 만들거나, 캐릭터의 흩날리는 머리카락 사이로 새로운 CG 폭발 효과를 완벽하게 추가하는 등, 기존 방식으로는 불가능했던 정교한 작업들을 자유롭게 할 수 있습니다.

---

### **3. RenderMan에서 Deep Data 출력하기**

RenderMan에서 Deep Data를 출력하는 것은 매우 간단합니다. 핵심은 올바른 파일 포맷을 선택하는 것입니다.

**실습 단계:**

1. **파일 포맷 선택:** Deep Data는 **OpenEXR (.exr)** 포맷에서만 지원됩니다.
2. **Display 설정 변경:**
    - **Render Settings > AOVs** 탭으로 이동합니다.
    - `Outputs` 섹션에서 주된 렌더 결과물인 **`Ci`** (Color and Alpha)를 선택합니다.
    - Attribute Editor를 보면 `Display` 노드의 속성이 나타납니다.
    - `File Format` 옵션을 `openexr`가 아닌 **`deepopenexr`*로 변경합니다.
3. **Deep 설정 (선택 사항):**
    - `Deep EXR Compression`: 압축 방식을 설정합니다. 보통 `ZIPS` (손실 압축, 작은 파일 크기)가 효율적입니다.
    - `Deep EXR Volumetric`: 연기나 불꽃 같은 볼륨 오브젝트를 합성할 경우 활성화하면 더 정확한 결과를 얻을 수 있습니다.
4. **렌더링:** 이제 평소처럼 렌더링을 하면, 출력 경로에 단일 `.exr` 파일이 생성됩니다. 이 파일 안에 모든 Deep Data가 포함되어 있습니다.

---

### **4. Nuke 합성을 위한 최종 렌더 패키지 구성**

이제 우리는 다음 파트인 Nuke 수업을 위해 최종 렌더 결과물을 준비할 것입니다. 전문적인 파이프라인에서는 다음과 같이 결과물을 구성하여 합성팀에 전달합니다.

1. **Deep EXR 파일 (1개):**
    - `beauty.deep.exr`
    - 공간적인 위치 관계와 완벽한 마스크(Matte) 생성을 위한 핵심 데이터입니다.
2. **AOV / LPE 파일 (여러 개):**
    - `lgt_key_diffuse.exr`, `lgt_rim_specular.exr`, `sss.exr` 등등...
    - 합성 아티스트가 각 조명과 재질 요소의 색상, 밝기를 세밀하게 조절하기 위한 '재료'들입니다. 이들은 일반적인 `openexr` 포맷으로 렌더링해도 괜찮습니다.
3. **Shadow Pass 파일 (필요시):**
    - `shadow_key.exr`
    - CG 캐릭터의 그림자를 실사 바닥에 자연스럽게 합성하기 위한 그림자 전용 패스입니다.

합성 아티스트는 Deep EXR로 캐릭터의 완벽한 실루엣을 따내고, 그 위에 LPE 패스들을 겹쳐 색을 입힌 뒤, Shadow Pass로 그림자를 합성하여 최종 결과물을 완성하게 됩니다.

### **오늘의 실습 과제 (렌더링 파트 최종 과제)**

1. 6강에서 작업했던 **머리카락이 있는 캐릭터**나, 반투명 재질이 포함된 씬을 준비합니다.
2. 오브젝트에 약간의 **모션 블러**를 주거나 카메라의 **피사계 심도(Depth of Field)**를 활성화하여 가장자리가 부드럽게 렌더링되도록 설정합니다.
3. **Deep Data 렌더링:**
    - 위에서 배운 대로 렌더 세팅을 변경하여, 씬을 **`deepopenexr`** 포맷으로 렌더링하여 `character.deep.exr` 파일을 만듭니다.
4. **AOV/LPE 렌더링:**
    - 4강에서 배운 대로 Key, Fill, Rim Light에 대한 Light Group LPE 패스들을 각각 일반 `openexr` 포맷으로 렌더링합니다. (`lgt_key.exr`, `lgt_fill.exr` 등)
5. **최종 결과물:** 하나의 폴더 안에 Deep EXR 파일 1개와 여러 개의 LPE 패스 파일들이 들어있는 **'합성용 렌더 패키지'**를 완성합니다.

이 패키지를 만드는 것으로 RenderMan을 이용한 렌더링 수업을 마무리하며, 다음 Nuke 수업에서 이 결과물을 직접 활용할 준비를 마칩니다.