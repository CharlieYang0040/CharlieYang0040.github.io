## 8강: Procedural Texturing 심화

### 수업 목표

- RenderMan이 제공하는 다양한 절차적 노드들의 특징과 활용법을 익힙니다.
- `PxrRamp`, `PxrDirt` 등 고급 노드를 사용하여 절차적 패턴에 논리적인 규칙과 다채로운 색상을 부여하는 방법을 배웁니다.
- MaterialX LAMA 레이어링과 심화된 절차적 텍스처링을 결합하여, **'이끼 낀 젖은 돌담'**과 **'살아 움직이는 용암'**처럼 완전히 다른 성질의 극사실적인 재질을 오직 노드만으로 완성합니다.

---

### **1. Procedural Texturing: 논리를 설계하다**

7강에서 우리는 절차적 노이즈를 '마스크'로 사용하는 법을 배웠습니다. 8강의 심화 과정은 여기서 한 단계 더 나아가, 재질의 모든 요소를 **'논리적인 시스템'**으로 설계하는 것입니다.

- "이끼는 돌담의 **틈새에서만** 자라야 한다."
- "용암의 색과 빛은 **온도에 따라** 달라져야 한다."

이러한 논리적 규칙을 노드로 구현하는 것이 이번 시간의 핵심입니다. 그리고 이 모든 창의적인 과정을 실시간으로 확인시켜 주는 **XPU IPR 렌더링**은 우리의 가장 중요한 도구가 될 것입니다.

---

### **2. 고급 절차적 노드 탐구: 새로운 창조 도구**

오늘의 두 가지 재질을 만들기 위해 새로운 도구들을 소개합니다.

- `PxrVoronoise`: 세포 분열이나 돌멩이 패턴처럼 **셀(Cell) 기반의 패턴**을 만듭니다.
- `PxrDirt`: **오브젝트의 틈새를 감지**하여 자연스러운 때나 이끼가 낄 자리를 찾아줍니다.
- `PxrRamp`: 단순한 흑백 노이즈 값을 **아름다운 컬러 그라데이션**으로 변환하는 마법 같은 노드입니다.

---

### **3. 실습: 논리와 규칙으로 재질 빚기**

이제 두 가지 상반된 예제를 통해 절차적 텍스처링의 무한한 가능성을 탐험해 보겠습니다.

### **스터디 1: 구조와 환경의 상호작용 - '이끼 낀 젖은 돌담'**

이 재질의 핵심 논리는 **"돌의 구조가 이끼와 습기의 분포를 결정한다"**입니다.

1. **돌의 구조 (Foundation):** `PxrVoronoise`를 이용해 돌의 기본 형태와 요철(Bump)을 만듭니다. `PxrFractal`로 자연스러운 색상 변화를 더해 기본 `lama_dielectric` 돌 재질을 완성합니다.
2. **논리적 성장 (Moss):** **`PxrDirt`** 노드를 사용하여 돌의 '틈새'를 찾아냅니다. 이 틈새 정보가 바로 이끼가 자라날 위치를 결정하는 마스크가 됩니다. 별도로 만든 녹색의 거친 `lama_dielectric` 이끼 재질을 `lama_layer`를 통해 돌 위에 섞어줍니다.
3. **환경 효과 (Wetness):** 또 다른 `PxrFractal`로 물이 흐른 자국 패턴을 만듭니다. 이 패턴을 마스크로 사용하여 **`PxrBlend`** 노드로 재질의 `Roughness` 값을 제어합니다. 마스크의 흰 부분은 물에 젖어 반짝이게(Roughness 낮음), 검은 부분은 마른 상태(Roughness 높음)로 유지됩니다.

### **스터디 2: 에너지와 상태의 변환 - '살아 움직이는 용암'**

이 재질의 핵심 논리는 **"하나의 에너지(온도) 패턴이 색, 밝기, 질감을 모두 결정한다"**입니다.

1. **에너지의 근원 (Temperature Map):** `PxrFractal` 노드로 복잡한 노이즈 패턴을 생성합니다. 이것은 단순한 흑백 이미지가 아니라, 용암의 뜨겁고 차가운 부분을 나타내는 '온도 설계도'입니다.
2. **온도를 색으로 (The Ramp):** **`PxrRamp`** 노드를 사용합니다. 1번의 흑백 노이즈를 `Input`으로 연결하고, 램프의 그라데이션을 편집합니다.
    - **검은색(차가운) 영역 → 어두운 현무암 색상**
    - **회색 영역 → 붉은색, 주황색**
    - **흰색(뜨거운) 영역 → 밝은 노란색, 순백색**
3. **재질 속성 통합:**
    - **색상과 발광:** `PxrRamp`의 최종 색상 결과를 `lama_dielectric`(껍질)의 `Color`와 `lama_emission`(빛)의 `Color`에 동시에 연결합니다.
    - **발광 강도:** '온도 설계도'(`PxrFractal`)에서 가장 뜨거운 부분(흰색)만 빛나도록 `PxrRemap`으로 대비를 조절한 뒤, `lama_emission`의 `Gain`에 연결합니다.
    - **요철과 거칠기:** '온도 설계도'를 `PxrBump`와 `Roughness`에도 연결하여, 차가운 껍질은 더 튀어나오고 거칠게, 뜨거운 틈새는 매끈하고 빛나게 만듭니다.
4. **최종 조합:** `lama_add` 또는 `lama_layer`로 껍질과 발광 재질을 합쳐주면, 하나의 노이즈 패턴으로 제어되는 살아있는 용암이 완성됩니다.

---

### **오늘의 실습 과제**

1. **XPU IPR**을 켠 상태에서, 오늘 배운 두 가지 스터디(**'이끼 낀 돌담'**과 **'절차적 용암'**) 중 하나를 선택하여 처음부터 끝까지 직접 만들어 보세요.
2. **논리 수정:**
    - **돌담:** `PxrDirt`의 `Distance`를 조절하며 이끼가 퍼지는 범위를 실시간으로 제어해 보세요.
    - **용암:** `PxrRamp`의 색상을 바꿔 '푸른 불꽃의 마법 용암'처럼 완전히 새로운 느낌을 연출해 보세요.
3. **(도전 과제):** 자신이 선택한 재질에 새로운 논리 레이어를 하나 더 추가해 보세요.
    - **돌담:** '흰색 페인트가 희미하게 칠해진' 효과를 추가하기
    - **용암:** '더 차갑게 식어 굳은 검은 돌멩이들이 용암 위에 떠다니는' 효과 추가하기

### **8-1강 고급 Procedural Texturing 예제 (World Data 활용)**

기존의 노이즈 패턴이 오브젝트의 UV 공간(2D) 위에서 작동했다면, 지금부터 소개할 기법들은 오브젝트가 놓인 **월드 공간(3D)** 자체를 텍스처링의 재료로 사용합니다.

### **1. UV 없는 텍스처링: Tri-Planar 프로젝션**

UV를 펼치는 작업은 매우 지루하고, 복잡한 모델에서는 늘어짐(Stretching)이나 솔기(Seam) 문제가 발생하기 쉽습니다. Tri-Planar 프로젝션은 이 모든 문제를 해결하는 매우 강력한 기법입니다.

- **컨셉:** 텍스처를 오브젝트의 X, Y, Z 세 축 방향에서 동시에 프로젝션(투사)한 뒤, 표면의 방향(Normal)에 따라 가장 적절한 프로젝션 결과를 자연스럽게 섞어주는 방식입니다. 마치 세 대의 빔 프로젝터로 오브젝트를 감싸듯이 비추는 것과 같습니다.
- **핵심 노드:** `PxrTriplanar`
- **활용법:**
    1. `PxrTriplanar` 노드를 생성합니다.
    2. `Input Texture`에 일반 `PxrTexture` 노드를 연결하여 반복하고 싶은 이미지 텍스처(예: 돌, 콘크리트, 흙)를 지정합니다.
    3. `PxrTriplanar`의 결과(resultRGB, resultA 등)를 `lama_dielectric`의 `Color`나 `Roughness` 등 원하는 곳에 연결합니다.
- **결과:** UV가 전혀 없는 복잡한 스캔 데이터나, 여러 오브젝트로 이루어진 거대한 지형이라도 솔기나 늘어짐 없이 일관된 스케일의 텍스처를 완벽하게 적용할 수 있습니다. `PxrFractal` 같은 절차적 노이즈를 `Input Texture`에 연결하면, UV 없는 절차적 3D 노이즈를 만들 수도 있습니다.

---

### **2. 방향을 감지하는 셰이딩: World Normal을 이용한 눈(Snow) / 먼지(Dust) 효과**

현실에서 눈이나 먼지는 주로 **하늘을 향하는 윗면**에 쌓입니다. 이 논리를 World Normal 벡터를 이용해 그대로 구현할 수 있습니다.

- **컨셉:** 모든 폴리곤은 월드 공간에서의 방향 정보(World Normal Vector)를 가집니다. 위를 향하는 표면은 Y축 값이 1에 가깝고(벡터: 0, 1, 0), 옆면은 Y축 값이 0에 가깝습니다. 이 Y축 값만 추출하면 완벽한 '윗면 마스크'를 만들 수 있습니다.
- **핵심 노드:** `PxrPrimvar`, `PxrToFloat3`
- **활용법:**
    1. **`PxrPrimvar`** 노드를 생성하고, `Variable Name`에 **`N_world`** 라고 입력하여 월드 노멀 데이터를 읽어옵니다.
    2. **`PxrToFloat3`** 노드를 생성하고, `PxrPrimvar`의 `result`를 `Input`에 연결합니다. 이 노드는 벡터(Float3) 값을 R, G, B(X, Y, Z) 채널로 분리해 줍니다.
    3. `PxrToFloat3`의 **`resultG` (Y축 값)**를 `PxrRemap`에 연결하여 대비를 조절, 원하는 두께와 부드러움을 가진 '눈이 쌓일 영역 마스크'를 완성합니다.
    4. 이 마스크를 `lama_layer`의 `Mix`에 연결하여 기본 재질 위에 눈(하얗고 거친 `lama_dielectric`) 재질을 섞어줍니다.
- **결과:** 어떤 복잡한 형태의 모델이라도 오직 윗면에만 자연스럽게 눈이나 먼지가 쌓이는 효과를 자동으로 구현할 수 있습니다. 모델을 회전시키면 쌓이는 면이 실시간으로 바뀝니다.

---

### **3. 높이를 감지하는 셰이딩: World Position을 이용한 이끼 / 물기 효과**

오브젝트가 월드 공간의 어디에 위치하는지를 셰이딩에 활용할 수 있습니다. 특히 Y축(높이) 정보는 매우 유용합니다.

- **컨셉:** 월드 포지션의 Y값을 추출하여 높이에 따른 그라데이션을 만듭니다. 이를 이용해 "바닥에서부터 1미터 높이까지 이끼가 자라게 하라" 또는 "물에 잠긴 부분만 젖게 하라" 와 같은 효과를 만들 수 있습니다.
- **핵심 노드:** `PxrPrimvar`, `PxrRemap`
- **활용법:**
    1. **`PxrPrimvar`** 노드를 생성하고, `Variable Name`에 **`P_world`** 라고 입력하여 월드 포지션 데이터를 읽어옵니다.
    2. `PxrToFloat3`를 이용해 **`resultG` (Y축 값)**를 추출합니다.
    3. **`PxrRemap`** 노드를 이용해 이 높이 값을 0~1 범위의 그라데이션으로 매핑합니다. 예를 들어, `Input Min`을 0, `Input Max`를 100으로 설정하면, 월드 높이 0cm부터 100cm까지 부드럽게 변하는 흑백 그라데이션 마스크가 생성됩니다.
    4. 이 마스크를 활용하여 이끼 재질을 섞거나(`lama_layer`), `PxrBlend`를 통해 Roughness 값을 조절하여 물에 젖은 효과를 낼 수 있습니다.
- **결과:** 여러 개의 바위 모델이 씬에 흩어져 있어도, 정확히 같은 월드 높이 1미터 지점까지 동일한 이끼가 자라도록 설정하여 매우 사실적이고 일관된 환경을 연출할 수 있습니다. 오브젝트를 위아래로 움직이면 이끼가 자라는 높이가 실시간으로 변합니다.

이러한 월드 데이터 기반의 기법들은 8강의 '이끼 낀 돌담'이나 '용암' 예제와 결합될 때 더욱 강력한 시너지를 발휘합니다. 예를 들어, '이끼 낀 돌담'에 월드 노멀 기반의 '눈'을 추가로 쌓는 다층 레이어링도 가능합니다.